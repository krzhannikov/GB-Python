# GeekBrains 'Профессия программист Python', Курс 01 'Основы языка Python',
# Урок 07 'ООП. Продвинутый уровень', Задача 3:
# "Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. В его конструкторе
# инициализировать параметр, соответствующий количеству клеток (целое число). В классе должны быть реализованы
# методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()),
# деление (__truediv__()).Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и обычное (не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться
# округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных
# двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек
# этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному
# аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n*****."

class Cell:
    def __init__(self, amount):
        self.amount = int(amount)

    def __add__(self, other):
        new_cell = self.amount + other.amount
        return Cell(new_cell)

    def __sub__(self, other):
        new_cell = self.amount - other.amount
        if new_cell > 0:
            return Cell(new_cell)
        else:
            raise Exception("Second cell is bigger than first! Can`t subtract")

    def __mul__(self, other):
        new_cell = self.amount * other.amount
        return Cell(new_cell)

    def __truediv__(self, other):
        new_cell = self.amount // other.amount
        return Cell(new_cell)

    def make_order(self, cell_in_row):
        final = ''
        for _ in range(self.amount // cell_in_row):
            final += '*' * cell_in_row
            final += '\n'
        final += '*' * (self.amount % cell_in_row)
        return final


cell1 = Cell(3)
cell2 = Cell(5)
cell3 = Cell(7)

cell4 = cell1 + cell2
print(cell4.amount)
cell4 = cell2 - cell1
print(cell4.amount)
cell4 = cell1 * cell2
print(cell4.amount)
cell4 = cell3 / cell1
print(cell4.amount)
cell4 = cell2 * cell3
print(cell4.make_order(6))
cell4 = cell1 - cell2
print(cell4.amount)
